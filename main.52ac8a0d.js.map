{"version":3,"sources":["modules/Game.class.js","scripts/main.js"],"names":["Game","initialState","rows","columns","score","status","board","createEmptyBoard","Array","from","length","fill","addNewNumber","newStatus","flat","filter","Boolean","reduce","acc","val","emptyCells","rowIdx","colIdx","push","row","col","Math","floor","random","updateStatus","nonZero","num","merged","scoreGained","i","mergedValue","newRow","moved","totalScoreGained","r","originalRow","slideRowLeft","toString","map","reverse","reversedRow","transposeBoard","moveLeft","moveRight","transposed","c","hasEmpty","canMerge","module","exports","require","game","startButton","document","querySelector","updateGameField","getState","fieldRows","querySelectorAll","cells","children","updateCell","textContent","getScore","cell","className","classList","add","handleKeyPress","e","getStatus","code","moveUp","moveDown","checkVictory","setStatus","showWinMessage","checkGameOver","showLoseMessage","messangeWim","remove","messageLose","style","display","addEventListener","start","messageLose2","messageWin","restart","messageStart","backgroundColor","color","border","fontSize","touchStartX","touchStartY","touchEndX","touchEndY","handleSwipeGesture","deltaX","deltaY","abs","changedTouches","screenX","screenY"],"mappings":"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","file":"main.52ac8a0d.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\n/* eslint-disable */\nclass Game {\n  /**\n   * Creates a new game instance.\n   * @param {number[][]} initialState\n   */\n  constructor(initialState = null) {\n    this.rows = 4;\n    this.columns = 4;\n    this.score = 0;\n    this.status = 'idle';\n    this.board = initialState || this.createEmptyBoard();\n  }\n\n  /**\n   * Creates an empty board.\n   * @returns {number[][]}\n   */\n  createEmptyBoard() {\n    return Array.from({ length: this.rows }, () => Array(this.columns).fill(0));\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    if (this.status !== 'idle' && this.status !== 'lose') {\n      return; // Забороняємо перезапуск, якщо гра ще триває або вже виграна\n    }\n\n    this.status = 'playing';\n    this.board = this.createEmptyBoard();\n    this.addNewNumber();\n    this.addNewNumber();\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    // this.start();\n    // this.score = 0;\n    this.board = this.createEmptyBoard();\n    this.score = 0;\n    this.status = 'playing';\n    this.addNewNumber();\n    this.addNewNumber();\n  }\n\n  /**\n   * Returns the current score.\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  /**\n   * Returns the current board state.\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.board;\n  }\n\n  setStatus(newStatus) {\n    this.status = newStatus;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  calculateBoardSum() {\n    return this.board\n      .flat()\n      .filter(Boolean)\n      .reduce((acc, val) => acc + val, 0);\n  }\n\n  /**\n   * Adds a new number (2 or 4) to a random empty cell.\n   */\n  addNewNumber() {\n    const emptyCells = [];\n\n    for (let rowIdx = 0; rowIdx < this.rows; rowIdx++) {\n      for (let colIdx = 0; colIdx < this.columns; colIdx++) {\n        if (this.board[rowIdx][colIdx] === 0) {\n          emptyCells.push({ row: rowIdx, col: colIdx });\n        }\n      }\n    }\n\n    if (emptyCells.length === 0) {\n      this.updateStatus(); // Оновлюємо статус\n\n      return;\n    }\n\n    const { row, col } =\n      emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n    this.board[row][col] = Math.random() < 0.9 ? 2 : 4;\n  }\n\n  /**\n   * Slides and merges a row to the left.\n   * @param {number[]} row\n   * @returns {number[]}\n   */\n  slideRowLeft(row) {\n    const nonZero = row.filter((num) => num !== 0);\n    const merged = [];\n    let scoreGained = 0;\n\n    for (let i = 0; i < nonZero.length; i++) {\n      if (nonZero[i] === nonZero[i + 1]) {\n        const mergedValue = nonZero[i] * 2;\n\n        merged.push(mergedValue);\n        scoreGained += mergedValue; // Add to score\n        i++;\n      } else {\n        merged.push(nonZero[i]);\n      }\n    }\n\n    while (merged.length < this.columns) {\n      merged.push(0);\n    }\n\n    return { newRow: merged, scoreGained };\n  }\n  /**\n   * Moves the board left.\n   */\n  moveLeft() {\n    let moved = false;\n    let totalScoreGained = 0;\n\n    for (let r = 0; r < this.rows; r++) {\n      const originalRow = [...this.board[r]];\n      const { newRow, scoreGained } = this.slideRowLeft(this.board[r]);\n\n      if (newRow.toString() !== originalRow.toString()) {\n        moved = true;\n      }\n\n      this.board[r] = newRow;\n      totalScoreGained += scoreGained;\n    }\n\n    if (moved) {\n      this.score += totalScoreGained;\n      this.addNewNumber();\n    }\n\n    return moved;\n  }\n\n  /**\n   * Moves the board right.\n   */\n  moveRight() {\n    let moved = false;\n    let totalScoreGained = 0;\n\n    this.board = this.board.map((row) => {\n      const originalRow = [...row];\n      const { newRow, scoreGained } = this.slideRowLeft(row.reverse());\n      const reversedRow = newRow.reverse();\n\n      if (reversedRow.toString() !== originalRow.toString()) {\n        moved = true;\n      }\n\n      totalScoreGained += scoreGained;\n\n      return reversedRow;\n    });\n\n    if (moved) {\n      this.score += totalScoreGained;\n      this.addNewNumber();\n    }\n\n    return moved;\n  }\n\n  /**\n   * Moves the board up.\n   */\n  moveUp() {\n    this.transposeBoard();\n\n    const moved = this.moveLeft();\n\n    this.transposeBoard();\n\n    return moved;\n  }\n\n  /**\n   * Moves the board down.\n   */\n  moveDown() {\n    this.transposeBoard();\n\n    const moved = this.moveRight();\n\n    this.transposeBoard();\n\n    return moved;\n  }\n\n  /**\n   * Transposes the board (rows become columns and vice versa).\n   */\n  transposeBoard() {\n    const transposed = this.createEmptyBoard();\n\n    for (let r = 0; r < this.rows; r++) {\n      for (let c = 0; c < this.columns; c++) {\n        transposed[c][r] = this.board[r][c];\n      }\n    }\n\n    this.board = transposed;\n  }\n\n  /**\n   * Checks the game status (win, lose, or continue playing).\n   */\n  updateStatus() {\n    let hasEmpty = false;\n    let canMerge = false;\n\n    for (let rowIdx = 0; rowIdx < this.rows; rowIdx++) {\n      for (let colIdx = 0; colIdx < this.columns; colIdx++) {\n        if (this.board[rowIdx][colIdx] === 0) {\n          hasEmpty = true;\n        }\n\n        if (\n          (colIdx < this.columns - 1 &&\n            this.board[rowIdx][colIdx] === this.board[rowIdx][colIdx + 1]) ||\n          (rowIdx < this.rows - 1 &&\n            this.board[rowIdx][colIdx] === this.board[rowIdx + 1][colIdx])\n        ) {\n          canMerge = true;\n        }\n\n        if (hasEmpty || canMerge) {\n          this.status = 'playing';\n\n          return;\n        }\n\n        if (this.board[rowIdx][colIdx] === 2048) {\n          this.status = 'win';\n\n          return;\n        }\n      }\n    }\n\n    this.status = 'lose';\n  }\n\n  /**\n   * Checks if there are any valid moves left.\n   * @returns {boolean}\n   */\n  hasMoves() {\n    for (let rowIdx = 0; rowIdx < this.rows; rowIdx++) {\n      for (let colIdx = 0; colIdx < this.columns; colIdx++) {\n        if (this.board[rowIdx][colIdx] === 0) {\n          return true; // Є порожня клітинка\n        }\n\n        if (\n          (colIdx < this.columns - 1 &&\n            this.board[rowIdx][colIdx] === this.board[rowIdx][colIdx + 1]) ||\n          (rowIdx < this.rows - 1 &&\n            this.board[rowIdx][colIdx] === this.board[rowIdx + 1][colIdx])\n        ) {\n          return true; // Можливе злиття\n        }\n      }\n    }\n\n    return false;\n  }\n}\n\nmodule.exports = Game;\n","'use strict';\n\n// // Uncomment the next lines to use your game instance in the browser\nconst Game = require('../modules/Game.class');\nconst game = new Game();\nconst rows = 4;\nconst columns = 4;\n\nconst startButton = document.querySelector('.button.start');\n\nstartButton.addEventListener('click', () => {\n  if (game.getStatus() === 'idle') {\n    game.start();\n  } else {\n    const messageLose2 = document.querySelector('.message-lose');\n    const messageWin = document.querySelector('.message-win');\n\n    if (messageLose2) {\n      messageLose2.style.display = 'none';\n    }\n\n    if (messageWin) {\n      messageWin.classList.add('hidden');\n    }\n\n    game.restart();\n  }\n\n  updateGameField();\n\n  // Приховую початкове повідомлення\n  const messageStart = document.querySelector('.message-start');\n\n  if (messageStart) {\n    messageStart.style.display = 'none';\n  }\n\n  // Змінюю текст кнопки на \"Restart\"\n  startButton.textContent = 'Restart';\n\n  startButton.style.backgroundColor = 'red';\n  startButton.style.color = 'white';\n  startButton.style.border = 'none';\n  startButton.style.fontSize = '16px';\n});\n\n// Ініціалізація гри та підключення до DOM\ndocument.addEventListener('keyup', handleKeyPress);\n\n// Оновлення ігрового поля в DOM\nfunction updateGameField() {\n  const board = game.getState();\n  const fieldRows = document.querySelectorAll('.field-row');\n\n  if (!fieldRows || fieldRows.length === 0) {\n    return;\n  }\n\n  for (let r = 0; r < 4; r++) {\n    const cells = fieldRows[r].children; // Клітинки в рядку\n\n    for (let c = 0; c < 4; c++) {\n      const cell = cells[c];\n      const num = board[r][c];\n\n      updateCell(cell, num);\n    }\n  }\n\n  // Оновлюємо рахунок\n  document.querySelector('.game-score').textContent = `${game.getScore()}`;\n}\n\n// стилі окремої клітинки\nfunction updateCell(cell, num) {\n  cell.textContent = '';\n  cell.className = 'field-cell';\n\n  if (num > 0) {\n    cell.textContent = num;\n\n    if (num <= 1024) {\n      cell.classList.add(`field-cell--${num}`);\n    } else {\n      cell.classList.add('field-cell--2048');\n    }\n  }\n}\n\n// Обробка натискання клавіш\nfunction handleKeyPress(e) {\n  if (!game || game.getStatus() !== 'playing') {\n    return;\n  }\n\n  switch (e.code) {\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n    default:\n      return;\n  }\n\n  // Оновлюю поле після кожного ходу\n  updateGameField();\n\n  // Перевірю статус гри\n  if (checkVictory(game.getState())) {\n    game.setStatus('win');\n    showWinMessage();\n  } else if (checkGameOver(game.getState())) {\n    game.setStatus('lose');\n    showLoseMessage();\n  }\n}\n\nfunction showWinMessage() {\n  const messangeWim = document.querySelector('.message-win');\n\n  if (messangeWim) {\n    messangeWim.classList.remove('hidden');\n  }\n}\n\nfunction showLoseMessage() {\n  const messageLose = document.querySelector('.message-lose');\n\n  if (messageLose) {\n    messageLose.style.display = 'block';\n    messageLose.classList.remove('hidden');\n  }\n}\n\n// функція для перевірки перемоги\nfunction checkVictory(board) {\n  // перевіряю кожну клітинку на наявність 2048\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      if (board[r][c] === 2048) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\n// функція для перевірки Game Over\nfunction checkGameOver(board) {\n  // Перевіряємо наявність порожніх клітинок\n  for (let r = 0; r < rows; r++) {\n    for (let c = 0; c < columns; c++) {\n      if (board[r][c] === 0) {\n        return false; // Є порожня клітинка, гра продовжується\n      }\n\n      // Перевірка можливості злиття по горизонталі\n      if (c < columns - 1 && board[r][c] === board[r][c + 1]) {\n        return false;\n      }\n\n      // Перевірка можливості злиття по вертикалі\n      if (r < rows - 1 && board[r][c] === board[r + 1][c]) {\n        return false;\n      }\n    }\n  }\n\n  return true; // Гру закінчено (немає можливих ходів)\n}\n\n// --- Мобільне керування свайпами ---\nlet touchStartX = 0;\nlet touchStartY = 0;\nlet touchEndX = 0;\nlet touchEndY = 0;\n\ndocument.addEventListener('touchstart', (e) => {\n  touchStartX = e.changedTouches[0].screenX;\n  touchStartY = e.changedTouches[0].screenY;\n}, false);\n\ndocument.addEventListener('touchend', (e) => {\n  touchEndX = e.changedTouches[0].screenX;\n  touchEndY = e.changedTouches[0].screenY;\n  handleSwipeGesture();\n}, false);\n\nfunction handleSwipeGesture() {\n  if (!game || game.getStatus() !== 'playing') {\n    return;\n  }\n\n  const deltaX = touchEndX - touchStartX;\n  const deltaY = touchEndY - touchStartY;\n\n  if (Math.abs(deltaX) > Math.abs(deltaY)) {\n    if (deltaX > 30) {\n      game.moveRight();\n    } else if (deltaX < -30) {\n      game.moveLeft();\n    }\n  } else {\n    if (deltaY > 30) {\n      game.moveDown();\n    } else if (deltaY < -30) {\n      game.moveUp();\n    }\n  }\n\n  updateGameField();\n\n  if (checkVictory(game.getState())) {\n    game.setStatus('win');\n    showWinMessage();\n  } else if (checkGameOver(game.getState())) {\n    game.setStatus('lose');\n    showLoseMessage();\n  }\n}\n"]}